basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  internal_handlers.ComponentHealth:
    properties:
      details:
        additionalProperties: true
        type: object
      status:
        $ref: '#/definitions/internal_handlers.HealthStatus'
    type: object
  internal_handlers.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - user
        - admin
        type: string
    required:
    - email
    - name
    - password
    type: object
  internal_handlers.HealthResponse:
    properties:
      components:
        additionalProperties:
          $ref: '#/definitions/internal_handlers.ComponentHealth'
        type: object
      status:
        $ref: '#/definitions/internal_handlers.HealthStatus'
    type: object
  internal_handlers.HealthStatus:
    enum:
    - UP
    - DOWN
    type: string
    x-enum-varnames:
    - StatusUP
    - StatusDown
  internal_handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  internal_handlers.LoginResponse:
    properties:
      token:
        type: string
      user:
        properties:
          email:
            type: string
          id:
            type: integer
          name:
            type: string
          role:
            type: string
        type: object
    type: object
  internal_handlers.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  myapp_internal_models.User:
    description: User account information
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      role:
        example: user
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Production-ready user management microservice with JWT authentication
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Management API
  version: "1.0"
paths:
  /health:
    get:
      description: Returns overall health status with all component checks
      produces:
      - application/json
      responses:
        "200":
          description: All components healthy
          schema:
            $ref: '#/definitions/internal_handlers.HealthResponse'
        "503":
          description: One or more components unhealthy
          schema:
            $ref: '#/definitions/internal_handlers.HealthResponse'
      summary: Health check endpoint
      tags:
      - health
  /health/liveness:
    get:
      description: Indicates if the application is running and should not be restarted
      produces:
      - application/json
      responses:
        "200":
          description: Application is alive
          schema:
            $ref: '#/definitions/internal_handlers.HealthResponse'
      summary: Kubernetes liveness probe
      tags:
      - health
  /health/readiness:
    get:
      description: Indicates if the application is ready to accept traffic
      produces:
      - application/json
      responses:
        "200":
          description: Application ready to accept traffic
          schema:
            $ref: '#/definitions/internal_handlers.HealthResponse'
        "503":
          description: Application not ready
          schema:
            $ref: '#/definitions/internal_handlers.HealthResponse'
      summary: Kubernetes readiness probe
      tags:
      - health
  /health/startup:
    get:
      description: Indicates if the application has started successfully
      produces:
      - application/json
      responses:
        "200":
          description: Application started
          schema:
            $ref: '#/definitions/internal_handlers.HealthResponse'
        "503":
          description: Application not started
          schema:
            $ref: '#/definitions/internal_handlers.HealthResponse'
      summary: Kubernetes startup probe
      tags:
      - health
  /info:
    get:
      description: Get aggregated information from all registered info providers
      produces:
      - application/json
      responses:
        "200":
          description: Aggregated information
          schema:
            additionalProperties: true
            type: object
        "429":
          description: Rate limit exceeded
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get application information
      tags:
      - info
  /v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.LoginResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /v1/users:
    get:
      description: Get list of all users (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/myapp_internal_models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/myapp_internal_models.User'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /v1/users/{id}:
    delete:
      description: Delete user by ID (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get user details by ID (Owner or Admin)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/myapp_internal_models.User'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details (Owner or Admin)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/myapp_internal_models.User'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
