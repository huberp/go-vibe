#!/bin/bash

# YAML Configuration Examples
# This script demonstrates various ways to use the new YAML configuration system

echo "========================================"
echo "YAML Configuration Examples"
echo "========================================"
echo ""

# Example 1: Default (Development) Stage
echo "1. Running with default development stage:"
echo "   Command: ./server"
echo "   Stage: development (default)"
echo "   Config: config/base.yaml + config/development.yaml"
echo ""

# Example 2: Production Stage via CLI Flag
echo "2. Running with production stage (CLI flag):"
echo "   Command: ./server --stage=production"
echo "   Stage: production"
echo "   Config: config/base.yaml + config/production.yaml"
echo "   Note: Requires DATABASE_URL and JWT_SECRET env vars"
echo ""

# Example 3: Staging Stage via Environment Variable
echo "3. Running with staging stage (environment variable):"
echo "   Command: export APP_STAGE=staging && ./server"
echo "   Stage: staging"
echo "   Config: config/base.yaml + config/staging.yaml"
echo "   Note: Requires JWT_SECRET env var"
echo ""

# Example 4: Environment Variable Override
echo "4. Running with environment variable override:"
echo "   Command: export APP_STAGE=production"
echo "           export DATABASE_URL='postgres://prod:pass@prod-host:5432/db'"
echo "           export JWT_SECRET='prod-secret'"
echo "           export SERVER_PORT='9090'"
echo "           ./server"
echo "   Stage: production"
echo "   Config: YAML + environment overrides"
echo "   Result: PORT=9090 (overrides YAML value of 8080)"
echo ""

# Example 5: Backward Compatible (No YAML)
echo "5. Backward compatible (environment only - no YAML):"
echo "   Command: mv config config.backup"
echo "           export DATABASE_URL='postgres://user:pass@host:5432/db'"
echo "           export JWT_SECRET='secret'"
echo "           export SERVER_PORT='8080'"
echo "           ./server"
echo "   Stage: development (default)"
echo "   Config: Environment variables + defaults"
echo "   Note: Works exactly as before YAML feature"
echo ""

# Example 6: Docker Run
echo "6. Running in Docker with stage:"
echo "   Command: docker run -e APP_STAGE=production \\"
echo "                       -e DATABASE_URL='...' \\"
echo "                       -e JWT_SECRET='...' \\"
echo "                       -p 8080:8080 \\"
echo "                       myapp:latest"
echo "   Stage: production"
echo "   Config: Built-in YAML + runtime env vars"
echo ""

# Example 7: Kubernetes Helm
echo "7. Deploying to Kubernetes with Helm:"
echo "   Command: helm install myapp ./helm/myapp \\"
echo "                        --namespace production \\"
echo "                        --set config.stage=production \\"
echo "                        --create-namespace"
echo "   Stage: production"
echo "   Config: APP_STAGE env var set automatically"
echo ""

# Example 8: Helm with ConfigMap
echo "8. Helm deployment with ConfigMap:"
echo "   Command: helm install myapp ./helm/myapp \\"
echo "                        --namespace production \\"
echo "                        --set config.stage=production \\"
echo "                        --set config.useConfigMap=true \\"
echo "                        --create-namespace"
echo "   Stage: production"
echo "   Config: YAML files mounted from ConfigMap"
echo "   Mount path: /etc/myapp/config"
echo ""

# Example 9: Custom Stage
echo "9. Creating and using a custom stage:"
echo "   Step 1: Create config/qa.yaml with custom values"
echo "   Step 2: export APP_STAGE=qa"
echo "   Step 3: ./server"
echo "   Stage: qa (custom)"
echo "   Config: config/base.yaml + config/qa.yaml"
echo ""

# Example 10: Checking Active Configuration
echo "10. Checking which configuration is active:"
echo "    Command: ./server 2>&1 | grep 'Starting server'"
echo "    Output will show: 'Starting server' stage='production' port='8080'"
echo ""

echo "========================================"
echo "Quick Reference"
echo "========================================"
echo ""
echo "Stage Selection Methods:"
echo "  1. CLI flag:        ./server --stage=production"
echo "  2. Environment var: export APP_STAGE=production && ./server"
echo "  3. Default:         ./server (uses development)"
echo ""
echo "Configuration Priority (highest to lowest):"
echo "  1. Environment variables (DATABASE_URL, JWT_SECRET, etc.)"
echo "  2. Stage-specific YAML (config/production.yaml)"
echo "  3. Base YAML (config/base.yaml)"
echo "  4. Default values (hardcoded fallbacks)"
echo ""
echo "Environment Variable Mapping:"
echo "  server.port              -> SERVER_PORT"
echo "  database.url             -> DATABASE_URL"
echo "  database.max_open_conns  -> DB_MAX_OPEN_CONNS"
echo "  database.max_idle_conns  -> DB_MAX_IDLE_CONNS"
echo "  database.conn_max_lifetime -> DB_CONN_MAX_LIFETIME"
echo "  jwt.secret               -> JWT_SECRET"
echo ""
echo "Required Environment Variables by Stage:"
echo "  development: (none - uses defaults)"
echo "  staging:     JWT_SECRET"
echo "  production:  DATABASE_URL, JWT_SECRET"
echo ""
echo "========================================"
echo "For more information:"
echo "  - README.md (Configuration section)"
echo "  - docs/configuration/yaml-config-migration.md (Migration guide)"
echo "  - docs/configuration/yaml-config-options.md (Design decisions)"
echo "========================================"
